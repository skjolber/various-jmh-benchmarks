plugins {
    id 'me.champeau.gradle.jmh' version '0.4.8' apply false
    id 'com.github.ben-manes.versions' version '0.20.0' apply false
    id 'org.owasp.dependencycheck' version '4.0.2' apply false
    id 'com.github.spotbugs' version '1.6.9' apply false    
    id 'io.morethan.jmhreport' version '0.9.0' apply false
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.owasp.dependencycheck'
    //apply plugin: 'com.github.spotbugs'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    ext {
        javaJwtVersion = '3.7.0'
        jwksRsaVersion = '0.7.0'
        jjwtVersion = '0.9.1'
        jmhVersion = '1.21'
        oktaVersion = '0.4.0'
        junitJupiterVersion  = '5.3.2'
    }
    
    repositories {
        mavenLocal()
        jcenter()
    }
    
    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    
        reports {
            html.enabled = true
        }
    }    
    
    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    }

    // To generate an HTML report instead of XML
    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

}

configure(project(':jmh-benchmark')) {
    apply plugin: 'io.morethan.jmhreport'
    apply plugin: 'me.champeau.gradle.jmh'

    jmh {
        resultFormat = 'JSON'
        
        warmup = '1s' // Time to spend at each warmup iteration.
        warmupIterations = 10
        
        fork = 1
        timeOnIteration = '5s'
        iterations = 5
        benchmarkMode = ['thrpt']
        
        jvmArgs = ['-XX:+UseG1GC']
    }
    
    jmhReport {
        jmhResultPath = project.file("build/reports/jmh/results.json")
        jmhReportOutput = project.file("build/reports/jmh")
    }
    
    tasks.jmh.finalizedBy tasks.jmhReport
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    // Tell idea to output to build/classes/main instead of /out/
    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }

}



